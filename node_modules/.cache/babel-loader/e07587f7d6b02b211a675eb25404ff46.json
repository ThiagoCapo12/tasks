{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thiag\\\\first_project\\\\tasks\\\\src\\\\form-components\\\\CheckAnswer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CheckAnswer(_ref) {\n  _s();\n\n  let {\n    expectedAnswer\n  } = _ref;\n  const [userAnswer, setUserAnswer] = useState(\"\");\n\n  const handleChange = event => {\n    setUserAnswer(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Check Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"userAnswer\",\n      children: \"Your Answer:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"userAnswer\",\n      value: userAnswer,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), userAnswer === expectedAnswer ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u2714\\uFE0F Correct!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u274C Incorrect!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckAnswer, \"YN0MeWtl2kJ2nmD0+tgJCz6+vUY=\");\n\n_c = CheckAnswer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckAnswer\");","map":{"version":3,"sources":["C:/Users/thiag/first_project/tasks/src/form-components/CheckAnswer.tsx"],"names":["React","useState","CheckAnswer","expectedAnswer","userAnswer","setUserAnswer","handleChange","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,SAASC,WAAT,OAIS;AAAA;;AAAA,MAJY;AACxBC,IAAAA;AADwB,GAIZ;AACZ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAS,EAAT,CAA5C;;AAEA,QAAMK,YAAY,GAAIC,KAAD,IAAgD;AACjEF,IAAAA,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,EAAE,EAAC,YAFP;AAGI,MAAA,KAAK,EAAEL,UAHX;AAII,MAAA,QAAQ,EAAEE;AAJd;AAAA;AAAA;AAAA;AAAA,YAHJ,EASKF,UAAU,KAAKD,cAAf,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GA5BeD,W;;KAAAA,W","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport function CheckAnswer({\r\n    expectedAnswer\r\n}: {\r\n    expectedAnswer: string;\r\n}): JSX.Element {\r\n    const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUserAnswer(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Check Answer</h3>\r\n            <label htmlFor=\"userAnswer\">Your Answer:</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"userAnswer\"\r\n                value={userAnswer}\r\n                onChange={handleChange}\r\n            />\r\n            {userAnswer === expectedAnswer ? (\r\n                <span>✔️ Correct!</span>\r\n            ) : (\r\n                <span>❌ Incorrect!</span>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}